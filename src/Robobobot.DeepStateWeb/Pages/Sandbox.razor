@page "/sandbox"

<PageTitle>Sandbox mode</PageTitle>

<h1>Manual Sandbox Mode</h1>

<div class="container description">
    <div class="row-cols-8">
        <div class="col-9">
            The sandbox mode is where you learn how to control your bot. The point here is to examine which actions can be
            sent and what the response is. Click on the row in the log to see what call was made and view the response data.
        </div>
    </div>
</div>
<div class="container">
     <div class="row justify-content-start">
         <div class="col-6">
             @if (string.IsNullOrWhiteSpace(token))
             {
                 <CreateSandbox OnClientCreated="c => client = c" Token="s => token = s" Status="SetStatus" OnConnected="Connected"/>
             }
             else
             {
                 <div>
                     <div class="d-flex flex-row">
                     <MovePad OnMove="Move" OnLook="GetVisual"/>

                         <div class="d-flex flex-column">
                            <GetReadings OnClick="GetReadings"/>
                            <Aim OnClick="Aim" />
                            <Fire OnClick="Fire" />
                         </div>
                     </div>

                     <div class="form-check">
                         <input class="form-check-input" type="checkbox" @bind="autoRefreshVisualAfterMove" id="autoRefreshVisualCheckBox">
                         <label class="form-check-label" for="autoRefreshVisualCheckBox">
                             Auto refresh view after move
                         </label>
                     </div>
                 </div>
                 <div>
                     <MapViewer Map="@battleField"/>
                 </div>
             }
         </div>
         <div class="col-6">
             <Log @ref="log" />
         </div>
      </div>    
</div>

@code {
    Log? log;
    bool autoRefreshVisualAfterMove = true;
    string? battleField;
    string token = "";
   
    RobobobotClient? client;

    private void SetStatus(string value)
    {
        log?.WriteSeparator();
        log?.WriteLine(value);
    }

    private async Task Connected()
    {
        log?.ResetLog();
        
        if (autoRefreshVisualAfterMove)
        {
            await GetVisual();
        }
    }

    private async Task GetVisual()
    {
        if (client is null)
        {
            SetStatus("The client is null, something is wrong...");
            return;
        }
        
        SetStatus("Getting visual");
        var response = await client.GetVisual();
        battleField = response.BattleField;
        SetStatus("Getting visual done (ready)");
    }

    private async Task Fire()
    {
        
    }

    private async Task GetReadings()
    {
        if (client is null)
        {
            SetStatus("The client is null, something is wrong...");
            return;
        }
        
        SetStatus("Getting reading");
        var response = await client.GetReadings();
        if (response.Success)
        {
            foreach (var item in response.Values)
            {
                SetStatus($"{item.Key}: {item.Value}");
            }
        }
        
        
        SetStatus("Getting reading done (ready)");
    }
    
    private async Task Aim(int degrees)
    {
        if (client is null)
        {
            SetStatus("The client is null, something is wrong...");
            return;
        }
        
        SetStatus($"Aiming {degrees} degrees");
        var response = await client.Aim(degrees);
        if (response.Success)
        {
            SetStatus($"Aiming complete, aiming at {response.FinalAngle} (relative to the tanks heading)");
        }
        
        SetStatus("Aiming (ready)");
    }

    private async Task Move(MoveDirection direction)
    {
        if (client is null)
        {
            SetStatus("The client is null, something is wrong...");
            return;
        }
         
        SetStatus($"Moving {direction.ToString()}!");

        var response = await client.Move(direction);
        
        SetStatus("Move done (ready)");
        
        if (autoRefreshVisualAfterMove && response.Success)
        {
            await GetVisual();
        }
    }
}